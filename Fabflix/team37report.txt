Cristina Nguyen
Alejandro Trejo


Task 1


* How did you use connection pooling?
We used connection pooling in the Home.java servlet and MovieList.java servlet where we implemented searching in Fabflix.  We also used connection pooling in other files that wrote to the database such EmployeeIndex.java and Conformation.java. These connected to the master instance instead. In order to enable connection pooling, we added  the resource for the database in the context file. In the servlets, we establish a connection by looking up the moviedb resource and creating a DataSouce object. Meanwhile, in the web.xml file, we added the necessary resource reference to the one we created in the context file so we can map the reference to the container configuration in the context.xml file.    


File name, line numbers as in Github
* Fabflix/src/EmployeeIndex.java
   * Line numbers: 78 - 99
* Fabflix/src/Confirmation.java
   * Line numbers: 69 - 90
* Fabflix/src/ShoppingCart.java
   * Line numbers: 88 - 109
* Fabflix/src/CreditaCardInfo.java
   * Line Numbers: 68 - 89
* Fabflix/src/SingleEntity.java
   * Line numbers: 69 - 90
* /Fabflix/src/Home.java 
   * Line numbers: 67 - 88
* /Fabflix/src/loginServlet.java
   * Line numbers: 75 - 96
* /Fabflix/src/MovieList.java
   * Line numbers: 252 -  273




* Snapshots ( code is identical in both servlets (Home.java, MovieList.java, CreditCardInfo.java, ShoppingCart.java, SingleEntity.java) )
  





        Snapshots of EmployeeIndex.java and Confirmation.java (code is the same for both)
  





* How did you use Prepared Statements?
We also used prepared statements in order to execute the search queries because prepared statements are connection-specific, so they are mapped and cached to the connection they were made with. In the Home servlet, we used prepared statements to find movie title and star name matches. In the MovieList servlet, we used prepared statements for all queries written to find all needed movie information like stars and genres. 


File name, line numbers as in Github
*  /Fabflix/src/Home
   * Line numbers:         104 - 105,  137 - 141


* /Fabflix/src/MovieList
   * Line numbers:         279 -  283,  323 - 326,  345 - 349






* Snapshots
                Home.java
  



  



                MovieList.java
  
  
  







Task 2


* Address of AWS and Google instances
        AWS(load balancer): 52.53.212.215 , Google: 35.227.187.3 ,
AWS (Master):54.215.128.72 AWS (Slave): 18.144.6.194


	

	

* Have you verified that they are accessible? Does Fablix site get opened both on Google’s 80 port and AWS’ 8080 port? 


Yes & Yes




* How connection pooling works with two backend SQL?
When the driver passes a connection to the servlet,  that connection can either connect to the master or the slave unless we know that we are writing, then it has to connect to the master so we will create a connection to the master specifically. Whatever is executed will be passed to the whichever the connection was set to connect to by the driver. We establish the datasource in the source code itself which is shown in the pictures from task 1. 
        


   * File name, line numbers as in Github
        Context.xml : line numbers 1 -14
        




   * Snapshots
Context.xml
  



* How read/write requests were routed?
        For read requests, we had a resource defined in the context.xml routed to the localhost because read requests can be handled by either the master or slave, so we let the original instance decide which server to send a request to. If we had only write requests, we defined a resource in  the context.xml that used the internal IP address of the master since only master can handle write requests. We mapped the resource to the necessary container  from the context.xml in the web.xml file
        


   * File name, line numbers as in Github
                Web.xml : lines 12 - 42
                
* Snapshots
                web.xml
  







Task 3


* Have you uploaded the log file to Github? Where is it located?
        Yes.


        Fabflix/logfiles




* Have you uploaded the HTML file to Github? Where is it located?
Yes.
Fabflix/graphsandreports




* Have you uploaded the script  to Github? Where is it located?
        Fabflix/graphsandreports




* Have you uploaded the WAR file and README  to Github? Where is it located?
        Fabflix/